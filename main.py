from check_access import check_access
import keyboard
import time
import threading
import serial
from pynput import mouse

# Serielle Verbindung herstellen
ser = serial.Serial('COM4', 115200)

# Flag, um die Ausführung des Patterns zu steuern
continue_pattern = False

# Liste der Muster
patterns = {
    #AK
    'pattern1': [(0, 16, 0.066), (-4, 20, 0.032), (-4, 20, 0.06), (0, 16, 0.033), (-4, 20, 0.066), (0, 16, 0.035),
                 (4, 20, 0.056), (8, 16, 0.05), (4, 12, 0.042), (8, 20, 0.033), (12, 20, 0.064), (12, 20, 0.027),
                 (12, 16, 0.065), (8, 20, 0.033), (-12, 12, 0.059), (-16, 12, 0.033), (-16, -4, 0.066), (-20, 8, 0.027),
                 (-20, 4, 0.064), (-16, 4, 0.027), (-16, 8, 0.065), (-20, 4, 0.032), (12, 8, 0.06), (-8, 4, 0.032),
                 (-12, 4, 0.065), (-16, -4, 0.027), (-12, -4, 0.065), (-16, -4, 0.034), (16, 4, 0.06), (16, 4, 0.037),
                 (16, 4, 0.059), (20, 4, 0.043), (16, 4, 0.048), (12, 4, 0.054), (16, 8, 0.043), (16, 0, 0.027),
                 (16, -12, 0.066), (16, 0, 0.033), (12, -4, 0.06), (12, -4, 0.033), (12, -4, 0.06), (8, -4, 0.032),
                 (-12, 4, 0.065), (-16, 0, 0.032), (-12, 4, 0.059), (4, 8, 0.037), (4, 4, 0.06), (-12, 8, 0.048),
                 (8, 0, 0.045), (16, -4, 0.048), (12, 4, 0.049), (8, 0, 0.033), (-24, -4, 0.059), (-20, -4, 0.033),
                 (-12, 0, 0.065), (-12, 0, 0.027), (-16, 0, 0.065), (-12, -8, 0.032), (-12, -4, 0.065), (-12, -12, 0.027),
                 (-12, -20, 0.065), (-8, -4, 0.033), (-12, 0, 0.065), (-20, 4, 0.039)]
    ,#M4A1-S
    'pattern2': [ (0, 4, 0.06), (0, 4, 0.032), (0, 6, 0.065), (0, 6, 0.034), (-2, 10, 0.059), (0, 10, 0.027), (2, 12, 0.066),
                  (2, 12, 0.032), (-2, 12, 0.059), (-2, 14, 0.032), (-2, 12, 0.065), (-2, 12, 0.027), (2, 10, 0.064), (4, 8, 0.033),
                  (8, 6, 0.065), (10, 6, 0.028), (10, 6, 0.065), (8, 4, 0.027), (4, 2, 0.066), (2, -2, 0.046), (-8, -6, 0.048),
                  (-8, -4, 0.053), (-10, -2, 0.04), (-10, -2, 0.033), (-12, 2, 0.065), (-10, 4, 0.032), (-10, 4, 0.06), (-8, 4, 0.033),
                  (-8, 2, 0.061), (-8, 2, 0.034), (-8, 2, 0.065), (-8, 2, 0.035), (-8, 2, 0.055), (-8, 0, 0.059), (-6, 0, 0.04),
                  (-2, 0, 0.027), (8, 0, 0.066), (10, 0, 0.028), (12, -8, 0.064), (12, -8, 0.033), (10, 2, 0.064), (8, 0, 0.033),
                  (8, -2, 0.06), (8, -2, 0.044), (6, 2, 0.055), (6, 2, 0.027), (-2, 2, 0.063), (0, 2, 0.032), (6, 2, 0.092),
                  (6, 2, 0.043), (8, 0, 0.053)]
    ,#M4A4
    'pattern3': [(0, 12, 0.027), (-4, 8, 0.065), (-8, 12, 0.033), (4, 16, 0.06), (4, 16, 0.033), (-8, 16, 0.066), (4, 16, 0.027), (-4, 16, 0.065), (-4, 20, 0.033), (4, 16, 0.06), (8, 16, 0.033), (8, 12, 0.066), (8, 8, 0.027), (32, 8, 0.063), (28, 8, 0.034), (-8, 16, 0.061), (-4, 4, 0.032), (-12, 4, 0.065), (-12, 4, 0.027), (-20, 4, 0.066), (-20, -4, 0.029), (-16, 0, 0.065), (-20, 0, 0.028), (-16, 0, 0.065), (-12, -4, 0.032), (-12, -4, 0.065), (-16, -4, 0.027), (-8, 8, 0.066), (8, 8, 0.032), (4, 4, 0.065), (-4, 0, 0.027), (-12, 0, 0.065), (-12, -4, 0.033), (-8, 0, 0.06), (12, 0, 0.033), (12, 4, 0.065), (12, 4, 0.033), (20, 4, 0.061), (12, 8, 0.033), (12, 0, 0.065), (12, 0, 0.027), (12, 0, 0.065), (20, 0, 0.032), (8, 0, 0.065), (12, 4, 0.027), (-4, 0, 0.066), (-12, 4, 0.032), (12, 4, 0.06), (8, 0, 0.033), (8, 4, 0.065), (8, 4, 0.027)]
    ,#Famas
    'pattern4': [(-4, 8, 0.067), (-4, 12, 0.032), (-4, 12, 0.06), (0, 12, 0.031), (0, 8, 0.065), (4, 12, 0.032), (4, 12, 0.064), (4, 12, 0.027), (4, 12, 0.064), (4, 12, 0.033), (4, 16, 0.066), (0, 16, 0.027), (-4, 12, 0.065), (-4, 12, 0.033), (-4, 8, 0.065), (-8, 4, 0.027), (-8, 4, 0.066), (-8, 4, 0.027), (-8, 4, 0.065), (-8, 4, 0.033), (12, 0, 0.06), (8, 4, 0.017), (12, 4, 0.065), (8, 4, 0.119), (12, 4, 0.234), (12, 12, 0.033), (8, 1, 0.065), (12, 4, 0.027), (8, 8, 0.064), (8, 4, 0.033), (-4, -4, 0.065), (-4, -8, 0.028), (-4, -8, 0.066)]
    ,#Mac10
    'pattern5': [(0, 8, 0.065), (0, 10, 0.033), (0, 10, 0.059), (0, 12, 0.032), (4, 16, 0.065), (8, 16, 0.027), (10, 20, 0.065), (10, 20, 0.032), (6, 20, 0.059), (4, 20, 0.032), (0, 14, 0.066), (0, 14, 0.028), (-8, 12, 0.066), (-8, 12, 0.032), (-8, 10, 0.059), (0, 8, 0.033), (0, 4, 0.065), (0, 2, 0.027), (-6, 4, 0.066), (-6, 2, 0.049), (-10, 0, 0.042), (-8, 0, 0.017), (-6, 0, 0.065), (-6, 0, 0.109), (-4, 0, 0.217), (-2, 2, 0.033), (0, 4, 0.065), (0, 2, 0.027), (0, -8, 0.309), (0, -8, 0.033), (0, -4, 0.294), (0, -4, 0.033), (0, -4, 0.06), (0, -4, 0.033), (0, -4, 0.064), (0, -4, 0.033)]
    ,#MP9
    'pattern6': [(0, 12, 0.066), (0, 16, 0.033), (0, 20, 0.061), (8, 20, 0.034), (12, 24, 0.059), (8, 28, 0.033), (8, 24, 0.065), (8, 24, 0.027), (12, 8, 0.065), (16, 8, 0.032), (20, 4, 0.06), (20, 4, 0.033), (20, 4, 0.064), (20, 8, 0.032), (-20, 8, 0.059), (-20, 8, 0.034), (-20, 8, 0.066), (-20, 8, 0.029), (-20, 8, 0.065), (-16, 8, 0.027), (-16, 4, 0.065), (-16, 4, 0.017), (-12, 4, 0.061), (-12, 4, 0.109), (-12, 4, 0.216), (-12, 4, 0.032), (-12, 4, 0.066), (-12, 4, 0.026), (-8, 0, 0.066), (-8, 0, 0.033), (0, -8, 0.185), (0, -8, 0.033), (0, -8, 0.065), (0, -4, 0.257), (0, -4, 0.066), (0, -4, 0.027), (0, -4, 0.065), (0, -4, 0.033)]
    ,#SG553
    'pattern7': [(-3, 6, 0.016), (3, 6, 0.032), (-3, 6, 0.016), (0, 3, 0.065), (-3, 6, 0.011), (-3, 3, 0.034), (-3, 3, 0.016), (-1, 3, 0.033), (0, 6, 0.017), (-3, 6, 0.033), (0, 3, 0.017), (-3, 6, 0.033), (0, 6, 0.017), (0, 6, 0.033), (-3, 6, 0.016), (0, 9, 0.032), (-3, 9, 0.011), (-3, 6, 0.038), (-3, 6, 0.016), (0, 6, 0.033), (-3, 9, 0.016), (-3, 6, 0.033), (-3, 6, 0.011), (-3, 3, 0.037), (-3, 3, 0.017), (-3, 3, 0.033), (-3, 3, 0.017), (0, 3, 0.032), (3, 3, 0.016), (-3, 3, 0.033), (0, 3, 0.011), (-3, 3, 0.032), (0, 6, 0.017), (0, 3, 0.033), (0, 3, 0.016), (-3, 3, 0.049), (0, 3, 0.017), (-3, 3, 0.033), (-3, 0, 0.011), (-3, 3, 0.049), (0, 3, 0.017), (-3, 3, 0.032), (0, 6, 0.016), (-3, 3, 0.032), (0, 3, 0.016), (-3, 3, 0.033), (0, -3, 0.017), (-3, 3, 0.032), (0, 3, 0.016), (0, 3, 0.038), (-3, 3, 0.016), (-3, 0, 0.033), (0, 3, 0.016), (0, 3, 0.033), (-3, 0, 0.011), (-3, 3, 0.037), (0, 3, 0.017), (0, 3, 0.032), (0, 3, 0.016), (0, 3, 0.032), (0, 3, 0.016), (-3, 0, 0.033), (0, 3, 0.016), (-3, 0, 0.033), (-3, 0, 0.017), (-3, 3, 0.033), (0, -3, 0.016), (-3, -3, 0.033), (-3, -3, 0.017), (-3, -6, 0.033), (0, -6, 0.016), (-3, -9, 0.032), (-3, -6, 0.017), (0, -6, 0.032), (-3, -6, 0.033), (3, -3, 0.032), (9, 3, 0.016), (9, 3, 0.033), (6, 3, 0.016), (3, 0, 0.032), (3, 0, 0.016), (9, -3, 0.049), (9, 3, 0.011), (12, 3, 0.039), (12, 0, 0.011), (12, 0, 0.038), (9, 3, 0.011), (9, 3, 0.038), (12, -3, 0.011), (9, 3, 0.033), (6, 0, 0.016), (9, 0, 0.033), (3, 0, 0.016), (6, 0, 0.032), (3, 0, 0.017), (0, 3, 0.038), (3, 0, 0.011), (9, -6, 0.033), (3, 3, 0.016), (3, 0, 0.033), (3, 3, 0.017), (6, -3, 0.033), (3, 0, 0.033), (3, 3, 0.016), (3, 0, 0.032), (0, 3, 0.016), (3, 0, 0.033), (3, 3, 0.033), (3, 3, 0.032), (6, 3, 0.017), (6, 0, 0.032), (9, 3, 0.017), (9, 0, 0.033), (6, 0, 0.016), (6, 3, 0.033), (6, 0, 0.016), (-9, 6, 0.048), (-9, 6, 0.016), (-12, 9, 0.032), (-12, 9, 0.017), (-6, -9, 0.032), (-9, 0, 0.017), (3, 3, 0.032), (-30, 3, 0.016), (3, -3, 0.033), (-12, 3, 0.017), (-9, -9, 0.033), (-9, 0, 0.016), (-9, 3, 0.032), (-9, -3, 0.016), (-6, -3, 0.033), (-6, 0, 0.017), (-3, 0, 0.033), (-1, -3, 0.017)]
    ,#AUG
    'pattern8': [(0, 3, 0.033), (3, 3, 0.016), (0, 6, 0.033), (0, 6, 0.017), (0, 6, 0.033), (0, 6, 0.011), (0, 9, 0.038), (0, 6, 0.017), (3, 6, 0.033), (0, 3, 0.016), (0, 1, 0.033), (3, 6, 0.011), (3, 6, 0.033), (0, 6, 0.017), (0, 6, 0.033), (3, 6, 0.017), (3, 6, 0.033), (0, 3, 0.017), (0, 6, 0.033), (-3, 6, 0.011), (-3, 3, 0.038), (3, 3, 0.017), (0, 6, 0.033), (0, 6, 0.016), (-3, 6, 0.032), (3, 6, 0.017), (3, 3, 0.033), (3, 3, 0.017), (-3, 3, 0.032), (3, 6, 0.016), (3, 6, 0.033), (3, 6, 0.011), (-3, 3, 0.037), (3, 3, 0.011), (-3, 3, 0.037), (0, 3, 0.017), (3, 6, 0.033), (3, 6, 0.011), (3, 6, 0.033), (-3, 6, 0.016), (-3, 6, 0.037), (3, 3, 0.011), (-6, 6, 0.037), (-3, 3, 0.016), (-3, 3, 0.033), (-6, 0, 0.016), (-6, 0, 0.034), (-6, 3, 0.011), (3, 0, 0.038), (3, 3, 0.011), (3, 0, 0.038), (3, 3, 0.016), (3, 0, 0.033), (3, 3, 0.011), (0, 3, 0.038), (3, 0, 0.011), (-3, 3, 0.05), (-3, -3, 0.018), (-6, 0, 0.032), (-3, 0, 0.016), (-6, 0, 0.033), (-6, 0, 0.016), (-6, -3, 0.032), (-12, 0, 0.016), (-12, 0, 0.033), (-9, -3, 0.017), (-6, 0, 0.033), (-6, 0, 0.017), (-3, 0, 0.033), (-3, 0, 0.017), (-6, 0, 0.032), (-3, 3, 0.032), (-3, 0, 0.033), (-3, -3, 0.016), (-3, 3, 0.048), (0, 3, 0.016), (3, 0, 0.033), (-3, 3, 0.017), (0, 6, 0.032), (-1, 0, 0.006), (3, 0, 0.027), (3, 3, 0.017), (-3, 3, 0.033), (-3, 3, 0.016), (3, 0, 0.032), (3, 0, 0.017), (6, 0, 0.033), (6, 0, 0.016), (9, 0, 0.033), (6, 0, 0.017), (9, 0, 0.033), (6, -3, 0.016), (6, 0, 0.032), (6, 3, 0.017), (3, 0, 0.033), (3, 3, 0.017), (0, 3, 0.032), (3, 0, 0.016), (0, 3, 0.033), (-3, 0, 0.017), (0, 3, 0.033), (0, 3, 0.016), (0, 3, 0.033), (3, 0, 0.016), (6, 0, 0.033), (3, -3, 0.016), (3, 0, 0.033), (9, -3, 0.011), (3, -6, 0.039), (9, -3, 0.011), (3, -3, 0.033), (6, -3, 0.016), (6, 0, 0.033), (3, -3, 0.017), (3, -3, 0.033), (3, -6, 0.016), (3, -6, 0.033), (0, -6, 0.016), (6, 3, 0.033), (6, 0, 0.016), (-3, 3, 0.033), (-1, -6, 0.016), (-3, 0, 0.033), (-6, 3, 0.017), (-3, -6, 0.027), (-3, 3, 0.016), (-3, 0, 0.033), (-3, 3, 0.016), (-3, 3, 0.05), (-9, 0, 0.017)]
    ,
    }

# Aktuelles Muster, das ausgeführt werden soll
current_pattern = None


# Die Pattern-Funktion, die in einem separaten Thread läuft
def mouse_pattern():
    global continue_pattern
    while True:
        if continue_pattern and current_pattern is not None:
            for x, y, duration in patterns.get(current_pattern, []):
                if not continue_pattern:
                    break  # Bricht die Schleife ab, wenn die Maustaste losgelassen wird
                send_mouse_pattern(x, y)  # Bewegt die Maus entsprechend dem Muster
                #print(x, y, duration)
                time.sleep(duration)
        else:
            # Warte kurz, um unnötige CPU-Auslastung zu vermeiden
            time.sleep(0.1)


# Konvertiert einen Wert von -127 bis 128 in einen Arduino-kompatiblen Byte-Wert
def convert_to_arduino_byte(value):
    return value & 0xFF


# Sendet die Mauskoordinaten an den Arduino
def send_mouse_pattern(x, y):
    # Vorzeichen von x und/oder y umkehren
    x = x  # Vorzeichen von x umkehren
    y = -y  # Vorzeichen von y umkehren, falls nötig

    data = f"{x}:{y}x"  # Formatieren der Daten mit ':' als Trennzeichen und 'x' als Endzeichen
    ser.write(data.encode())  # Senden der Daten als byte-String



# Funktion zum Wechseln des Patterns
def change_pattern(num):
    global current_pattern
    pattern_name = f'pattern{num}'
    if pattern_name in patterns:
        current_pattern = pattern_name
        print(f'Switched to pattern {num}')
    else:
        print(f'Pattern {num} not found')


def main():
    # Starte den Pattern-Thread
    pattern_thread = threading.Thread(target=mouse_pattern)
    pattern_thread.daemon = True
    pattern_thread.start()

    try:
        while True:
            time.sleep(1)  # Hier können Sie die Häufigkeit der Tastaturüberwachung anpassen
    except KeyboardInterrupt:
        ser.close()
        print("\nProgramm wird beendet.")


def stop_pattern():
    global continue_pattern, current_pattern
    continue_pattern = False
    current_pattern = None
    print("Pattern stopped. Waiting for pattern selection...")


# Listener für Mausklick-Ereignisse
def on_click(x, y, button, pressed):
    global continue_pattern
    if button == mouse.Button.left:
        continue_pattern = pressed


# Event-Handler für Tastaturereignisse
def on_key(event):
    global continue_pattern, last_selected_pattern
    #print(event.scan_code)
    if event.event_type == keyboard.KEY_DOWN:
        if event.scan_code == 79:  # NumPad 1-Taste
            change_pattern(1)
            last_selected_pattern = 1
            print('AK47 Macro Aktiv...')
        elif event.scan_code == 80:  # NumPad 2-Taste
            change_pattern(2)
            last_selected_pattern = 2
            print('M4A1-S Macro Aktiv...')
        elif event.scan_code == 81:  # NumPad 3-Taste
            change_pattern(3)
            last_selected_pattern = 3
            print('M4A4 Macro Aktiv...')
        elif event.scan_code == 75:  # NumPad 4-Taste
            change_pattern(4)
            last_selected_pattern = 4
            print('FAMAS Macro Aktiv...')
        elif event.scan_code == 76:  # NumPad 5-Taste
            change_pattern(5)
            last_selected_pattern = 5
            print('MAC10 Macro Aktiv...')
        elif event.scan_code == 77:  # NumPad 6-Taste
            change_pattern(6)
            last_selected_pattern = 6
            print('MP9 Macro Aktiv...')
        elif event.scan_code == 71:  # NumPad 7-Taste
            change_pattern(7)
            last_selected_pattern = 7
            print('SG553 Macro Aktiv...')
        elif event.scan_code == 72:  # NumPad 8-Taste
            change_pattern(8)
            last_selected_pattern = 8
            print('AUG Macro Aktiv...')
        elif event.scan_code == 73:  # NumPad 9-Taste
            change_pattern(9)
            last_selected_pattern = 9
        elif (event.scan_code == 82):
            stop_pattern()
            last_selected_pattern = None
            print('1 = AK47\t', '2 = M4A1-S\t', '3 = M4A4')
            print('4 = FAMAS\t', '5 = MAC10\t', '6 = MP9')
            print('7 = SG553\t', '8 = AUG\t', '9 = None')
        elif (event.scan_code == 3 or event.scan_code == 4 or event.scan_code == 5 or event.scan_code == 6): # NumPad 0-Taste
            stop_pattern()
        elif event.scan_code == 2:  # Wenn die Taste mit scan_code 2 gedrückt wird
            if last_selected_pattern is not None and last_selected_pattern != 82:
                change_pattern(last_selected_pattern)


# Listener für Tastatureingaben starten
keyboard.on_press(on_key)

# Listener für Mausklick-Ereignisse starten
mouse_listener = mouse.Listener(on_click=on_click)
mouse_listener.start()

if __name__ == "__main__":
    access_granted, message = check_access()
    print(message)
    if access_granted:
        main()
    else:
        print("Programm closed.")
        time.sleep(5)
